# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
load("C:/PROJECT-CLONES/OaklandCrimeDashboard/data/CrimeData.rda")
View(CrimeData)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
??echarts4r::e_line
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
load("C:/PROJECT-CLONES/OaklandCrimeDashboard/data/CrimeData.rda")
table(CrimeData$Offense_Category)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## code to prepare `CrimeData` dataset goes here
library(tidyverse)
library(conflicted)
library(tidygeocoder)
library(lubridate)
data <- read_csv("C:/Project-Storage/OCD/CrimeWatch_Maps_Past_90-Days.csv")
data <- data |>
select(-c(CRIMETYPE,
CASENUMBER,
POLICEBEAT:STATE)) |>
mutate(Location = gsub("POINT ",
"",
Location),
Location = gsub(")",
"",
Location,
fixed = TRUE),
Location = gsub("(",
"",
Location,
fixed = TRUE)) |>
separate(Location,
into = c("Lon", "Lat"),
sep = " ",
remove = FALSE) |>
select(-c(Location))
data(ClassifiedDescriptions)
data <- data |>
left_join(ClassifiedDescriptions) |>
select(offense_type_desc,
offense_category_desc,
everything()) |>
rename(Offense_Category   = offense_type_desc,
Offense_Generalize = offense_category_desc) |>
mutate(DATETIME = parse_date_time(DATETIME,
"%m/%d/%Y %I:%M:%S %p"))
data <- data |>
mutate(DATEFILTER = as.character(DATETIME)) |>
mutate(DATEFILTER = str_sub(DATEFILTER,
start = 1,
end = 10)) |>
select(Offense_Category:DATETIME,
DATEFILTER,
everything()) |>
mutate(DATEFILTER = as.Date(DATEFILTER,
format = "%Y-%m-%d"))
data <- data |>
mutate(FIREARM = str_detect(DESCRIPTION, "FIREARM"),
SHOOTING = str_detect(DESCRIPTION, "SHOOT")) |>
mutate_at(vars(FIREARM,
SHOOTING),
function(x){
x = as.character(x)
x = na_if(x, "FALSE")
}) |>
mutate(FIREARM = coalesce(FIREARM,
SHOOTING)) |>
select(-c(SHOOTING)) |>
mutate(FIREARM = dplyr::recode(FIREARM,
"TRUE" = "Firearm Involved")) |>
select(Offense_Category,
FIREARM,
everything()) |>
mutate(Offense_Category = replace_na(Offense_Category, "Other")) |>
mutate(Offense_Category = dplyr::recode(Offense_Category,
"Criminal traffic" = "Criminal Traffic"))
CrimeData <- data
usethis::use_data(CrimeData, overwrite = TRUE)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
vec_3 <- vec_1[!vec_1 %in% vec_2]
vec_1 <- c("A", "B", "C", "D")
vec_2 <- c("A", "B")
vec_3 <- vec_1[!vec_1 %in% vec_2]
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
data <- data.frame()
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
View(data)
data[2] <- 2
View(data)
vec_3[1]
for(i in length(vec_3)){
data[i] <- 0
names(data)[i] <- vec_3[i]
}
View(data)
vec_3 <- vec_1[!vec_1 %in% vec_2]
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)){
data[i] <- 0
names(data)[i] <- vec_3[i]
}
View(data)
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)){
data[i+ncol(data)] <- 0
names(data)[i+ncol(data)] <- vec_3[i]
}
for(i in length(vec_3)){
data[i+ncol(data)] <- 0
# names(data)[i+ncol(data)] <- vec_3[i]
}
for(i in length(vec_3)){
data[i+1] <- 0
# names(data)[i+ncol(data)] <- vec_3[i]
}
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)){
data[i+1] <- 0
# names(data)[i+ncol(data)] <- vec_3[i]
}
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)){
data[i] <- 1
# names(data)[i+ncol(data)] <- vec_3[i]
}
View(data)
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)){
data[i] <- 1
# names(data)[i+ncol(data)] <- vec_3[i]
}
length(vec_3)
for(i in length(vec_3)-1){
data[i] <- 1
# names(data)[i+ncol(data)] <- vec_3[i]
}
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)+1){
data[i] <- 1
names(data)[i] <- vec_3[i]
}
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)+1){
data[i] <- 1
names(data)[i] <- vec_3[i-1]
}
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in seq_along(vec_3)){
col_name <- i
data[col_name] <- 0
}
View(data)
vec_3[1]
vec_3[[1]]
vec_1 <- c("A", "B", "C", "D")
vec_2 <- c("A", "B")
vec_3 <- vec_1[!vec_1 %in% vec_2]
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)){
col_name <- vec_3[i]
data[col_name] <- 0
}
View(data)
vec_1 <- c("A", "B", "C", "D")
vec_2 <- c("A", "B")
vec_3 <- vec_1[!vec_1 %in% vec_2]
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for(i in length(vec_3)){
col_name <- vec_3[[i]]
data[col_name] <- 0
}
View(data)
for(i in length(vec_3)){
col_name <- vec_3[[i]]
data[col_name] <- 0
}
View(data)
vec_1 <- c("A", "B", "C", "D")
vec_2 <- c("A", "B")
vec_3 <- vec_1[!vec_1 %in% vec_2]
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for (col_name in data) {
data[col_name] <- 0
}
vec_1 <- c("A", "B", "C", "D")
vec_2 <- c("A", "B")
vec_3 <- vec_1[!vec_1 %in% vec_2]
data <- data.frame(x = sample(c(0), size = 100, replace = TRUE))
for (col_name in vec_3) {
data[col_name] <- 0
}
View(data)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::add_module(name = "ZipCodeReporting", with_test = FALSE) # Name of the module
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
